{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","styleLink","document","createElement","rel","href","head","appendChild","App","useState","value","setValue","style","height","width","alignItems","justifyContent","textAlign","backgroundImage","display","verticalAlign","horizontalAlign","Input","transparent","onChange","e","target","action","color","onClick","axios","post","then","response","console","log","getElementsByClassName","innerText","catch","err","content","placeholder","border","padding","borderRadius","className","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2LAAAA,EAAOC,QAAU,IAA0B,kC,8JCmC3C,IAAMC,EAAYC,SAASC,cAAc,QACzCF,EAAUG,IAAM,aAChBH,EAAUI,KAAO,iEACjBH,SAASI,KAAKC,YAAYN,GAGXO,MAnCf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAqBb,OACE,yBAAKC,MAAO,CAACC,OAAO,QAASC,MAAM,QAASC,WAAW,SAAUC,eAAe,SAAUC,UAAU,SAAUC,gBAAiB,oDAAqDC,QAAQ,aAAcC,cAAe,SAAUC,gBAAgB,WAC/O,kBAACC,EAAA,EAAD,CAAOC,aAAW,EAACC,SANC,SAACC,GACzBd,EAASc,EAAEC,OAAOhB,QAKkCiB,OAAQ,CAACC,MAAO,OAAQC,QAAS,WAnBzE,KAATnB,GACDoB,IAAMC,KAAK,+DAAgE,CAAC,SAAYrB,IACvFsB,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZ/B,SAASkC,uBAAuB,kBAAkB,GAAGC,UAAYJ,EAAQ,KAAR,aAElEK,OAAM,SAACC,GACNL,QAAQC,IAAII,GACZrC,SAASkC,uBAAuB,kBAAkB,GAAGC,UAAY,YAWqCG,QAAS,iBAAkBC,YAAY,WAAW7B,MAAO,CAAC8B,OAAO,iBAAkBC,QAAQ,OAAQC,aAAc,SACvN,uBAAGC,UAAU,iBAAiBjC,MAAO,CAACkC,UAAW,OAAQlB,MAAO,UAAhE,kBClBYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpD,SAASqD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.af27bf02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Input } from 'semantic-ui-react';\nimport axios from 'axios';\n\nfunction App() {\n  const [value, setValue] = useState(\"\");\n\n  const handleClick = () => {\n    if(value!== \"\"){\n      axios.post(\"https://sentiment-analysis-ashutosh.herokuapp.com//sentiment\", {\"sentence\": value})\n      .then((response) => {\n        console.log(response);\n        document.getElementsByClassName(\"sentiment-text\")[0].innerText = response[\"data\"][\"sentiment\"];\n      })\n      .catch((err) => {\n        console.log(err);\n        document.getElementsByClassName(\"sentiment-text\")[0].innerText = \"Error\"\n      });\n    }\n  }\n\n  const handleValueChange = (e) => {\n    setValue(e.target.value);\n  }\n\n  return (\n    <div style={{height:\"100vh\", width:\"100vw\", alignItems:\"center\", justifyContent:\"center\", textAlign:\"center\", backgroundImage: \"linear-gradient(135deg, #667eea 0%, #764ba2 100%)\", display:\"table-cell\", verticalAlign: \"middle\", horizontalAlign:\"middle\"}}>\n        <Input transparent onChange={handleValueChange} action={{color: 'teal', onClick: () => handleClick(), content: \"GET SENTIMENT\"}} placeholder='Write...' style={{border:\"1px solid #fff\", padding:\"10px\", borderRadius: \"5px\"}} />\n        <p className=\"sentiment-text\" style={{marginTop: \"20px\", color: \"white\"}}>No Sentiment</p>\n    </div>\n  );\n}\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}